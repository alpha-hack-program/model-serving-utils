---
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    openshift.io/display-name: "{{ .Values.model.displayName }}"
    security.opendatahub.io/enable-auth: '{{ .Values.model.enableAuth }}'
    {{- if .Values.model.rawDeployment }}
    serving.kserve.io/deploymentMode: RawDeployment
    {{- else }}
    serving.knative.openshift.io/enablePassthrough: 'true'
    sidecar.istio.io/inject: 'true'
    sidecar.istio.io/rewriteAppHTTPProbers: 'true'
    {{- end }}
  name: {{ .Values.model.name }}
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    opendatahub.io/dashboard: 'true'
{{- if .Values.model.additionalLabels }}
{{- range $key, $value := .Values.model.additionalLabels }}
    {{ $key }}: "{{ $value }}"
{{- end }}
{{- end }}
spec:
  predictor:
    maxReplicas: {{ .Values.model.maxReplicas }}
    minReplicas: 1
    serviceAccountName: {{ .Values.model.name }}-sa
    model:
      modelFormat:
        name: {{ .Values.model.format }}
      name: ''
      resources:
        limits:
          nvidia.com/gpu: '{{ .Values.model.accelerator.max }}'
          cpu: '{{ .Values.model.runtime.resources.limits.cpu }}'
          memory: '{{ .Values.model.runtime.resources.limits.memory }}'
        requests:
          nvidia.com/gpu: '{{ .Values.model.accelerator.min }}'
          cpu: '{{ .Values.model.runtime.resources.requests.cpu }}'
          memory: '{{ .Values.model.runtime.resources.requests.memory }}'
      runtime: {{ .Values.model.name }}
      # If model.image is set, it will override the connection, else it will use the connection
      {{- if .Values.model.image }}
      storageUri: 'oci://{{ .Values.model.image }}'
      {{- else }}
      storage:
        key: aws-connection-{{ .Values.model.connection.name }}
        path: "{{ printf "%s/%s" .Values.model.root .Values.model.id }}"
      {{- end }}  
    tolerations:
      - effect: NoSchedule
        key: nvidia.com/gpu
        operator: Exists
    nodeSelector:
      nvidia.com/gpu.product: {{ .Values.model.accelerator.productName }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.model.name }}-sa
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    opendatahub.io/dashboard: 'true'
---
apiVersion: serving.kserve.io/v1alpha1
kind: ServingRuntime
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    opendatahub.io/accelerator-name: migrated-gpu
    opendatahub.io/apiProtocol: {{ .Values.model.apiProtocol }}
    opendatahub.io/template-display-name: "{{ .Values.model.runtime.templateDisplayName }}"
    opendatahub.io/template-name: "{{ .Values.model.runtime.templateName }}"
    openshift.io/display-name: "{{ .Values.model.displayName }}"
    opendatahub.io/recommended-accelerators: '["nvidia.com/gpu"]'
  name: {{ .Values.model.name }}
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    opendatahub.io/dashboard: 'true'
spec:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: '8080'
  containers:
    - args:
        - '--port=8080'
        - '--model=/mnt/models'
        - '--served-model-name={{ "{{.Name}}" }}'
        {{- if .Values.model.maxModelLen }}
        - '--max-model-len'
        - '{{ .Values.model.maxModelLen }}'
        {{- end }}
        {{- if eq .Values.model.accelerator.productName "Tesla-T4-SHARED" }}
        - '--dtype'
        - float16
        - '--tensor-parallel-size={{ .Values.model.accelerator.max }}'
        {{- end }}
        - '--distributed-executor-backend=mp'
        {{- if .Values.model.embeddingsModel }}
        - '--trust-remote-code'
        {{- end }}
        # https://docs.vllm.ai/en/latest/features/tool_calling.html#ibm-granite
        {{- if .Values.model.toolCallParser }}
        - '--tool-call-parser'
        - '{{ .Values.model.toolCallParser }}'
        {{- end }}
        {{- if .Values.model.chatTemplate }}
        - '--chat-template'
        - '{{ .Values.model.chatTemplate }}'
        {{- end }}
      command:
        - python
        - '-m'
        - vllm.entrypoints.openai.api_server
      env:
        - name: HF_HOME
          value: /tmp/hf_home
      image: '{{ .Values.model.runtime.image }}'
      name: kserve-container
      ports:
        - containerPort: 8080
          protocol: TCP
      volumeMounts:
        - mountPath: /dev/shm
          name: shm
  multiModel: false
  supportedModelFormats:
    - autoSelect: true
      name: {{ .Values.model.format }}
  volumes:
    - emptyDir:
        medium: Memory
        sizeLimit: {{ .Values.model.volumes.shm.sizeLimit }}
      name: shm
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.model.name }}-get-role
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    opendatahub.io/dashboard: 'true'
rules:
  - verbs:
      - get
    apiGroups:
      - serving.kserve.io
    resources:
      - inferenceservices
    resourceNames:
      - {{ .Values.model.name }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.model.name }}-get-rolebinding
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    opendatahub.io/dashboard: 'true'
subjects:
  - kind: ServiceAccount
    name: {{ .Values.model.name }}-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.model.name }}-get-role
{{- if .Values.model.enableAuth }}
---
kind: Secret
apiVersion: v1
  annotations:
    kubernetes.io/service-account.name: {{ .Values.model.name }}-sa
  name: auth-token-secret
  namespace: {{ .Values.dataScienceProjectNamespace }}
type: kubernetes.io/service-account-token
{{- end }}